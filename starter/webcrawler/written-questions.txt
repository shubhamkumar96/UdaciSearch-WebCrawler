Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
Answer:-
    Parser take more time when run with 'ParallelWebCrawler' because, the 'ParallelWebCrawler' Parser is doing
    more work as compared to 'SequentialWebCrawler' Parser, as can be seen in below output:-

    SequentialWebCrawler Output:-
    {"wordCounts":{"learning":183,"program":133,"machine":126,"with":104,"data":95},"urlsVisited":5}

    Run at Sat, 14 Aug 2021 12:31:51 GMT
    com.udacity.webcrawler.SequentialWebCrawler#crawl took 0m 5s 346ms
    com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 5s 283ms

    ParallelWebCrawler Output:-
    {"wordCounts":{"data":563,"program":242,"learning":202,"with":198,"udacity":197},"urlsVisited":13}

    Run at Sat, 14 Aug 2021 12:32:44 GMT
    com.udacity.webcrawler.ParallelWebCrawler#crawl took 0m 6s 577ms
    com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 15s 928ms

    As can be seen from above output that the 'ParallelWebCrawler' visited "13" sites as compared to
    'SequentialWebCrawler' which visited "5" sites.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
Answer:-
        In case of running Single thread, the Parallel Web Crawler will bring no benefit. In fact, the Parallel
        WebCrawler will take more resources and time than the Sequential Web Crawler, as it will have to create,
        use and shutdown the ForkJoin Pool, which is not the case with Sequential Web Crawler.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
Answer:-
        In case of Multi-core computer, the Parallel Web Crawler will almost certainly perform better than the
        Sequential Web Crawler, as more work will be done in case of Parallel Web Crawler because the ForkJoin pool
        will distribute the work among the threads.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
Answer:-
        We can measure the time that is taken by any method to run, just by annotating that method with the
        '@Profiled' Annotation. This is the cross-cutting concern that is being addressed.

    (b) What are the join points of the Profiler in the web crawler program?
Answer:-
        Join Points of the Profiler in the Web Crawler Program are the 'Methods' that are annotated with "@Profiled"
        Annotation.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
Answer:-
    (1) Singleton Pattern:
        We used the '@Singleton' annotation while injecting some of our dependencies with Guice, thus making sure
        that Only One Instance of the Injected class are loaded into the application and the same gets used when
        needed.
        ADVANTAGES:-
            Singleton is really very handy at the time when 'Object Creation' is Heavy, and we only want to create
            Object once and use the same anywhere in the application when needed.
        DISADVANTAGES:-
            Singleton does not fare well in case of Multi-Threaded Environment when there is Mutually shared data to
            be Mutated.
            Singleton also makes Unit-Testing very difficult by introducing a global state therefore making it difficult
            to mock Objects.

    (2) Builder Pattern:
        We use the Builder Pattern to provide more readable and cleaner APIs, in case where we are faced with
        many constructor parameters. For Example, we used this pattern while creating 'CrawlerConfiguration' to
        load properties from the given file into the object using Jackson.

        ADVANTAGES:-
            "Builder Pattern" comes handy while creating complex objects.
        DISADVANTAGES:-
            It should not be preferred to be used while creating fairly simple objects with few properties.

    (3) Dependency Injection:
        We used Guice Library to inject dependencies in most parts of our application. For Example, In our
        'WebCrawlerMain' class, we injected 'WebCrawler' & 'Profiler' classes.
        ADVANTAGES:-
            It makes our code fairly simpler and easy to manage, as we do not have to manually construct the
            dependencies.
        DISADVANTAGES:-
            It makes our code hard to understand as it increases complexity.